{
  "version": 3,
  "file": "demo-2.js",
  "sourceRoot": "..",
  "sources": [
    "src/demo-2.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n### https://ponyfoo.com/articles/understanding-javascript-async-await ###\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'YAU/DEMO-2'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n#...........................................................................................................\n{ happy\n  sad\n  is_sad\n  new_defect\n  new_failure\n  is_crash\n  crash\n  is_unhappy\n  is_happy              } = require './happy-sad-bad'\n{ after, immediately: defer }    = CND.suspend\n{ promisify, }            = require 'util'\njr                        = JSON.stringify\n#...........................................................................................................\n{ select\n  emit\n  delegate\n  on_any\n  also_on\n  primary_on }            = require './xemitter'\n\n#-----------------------------------------------------------------------------------------------------------\nerror_handler = ( reason ) ->\n  if is_sad reason\n    return urge 'this is sad:', jr reason\n  if is_crash reason\n    warn CND.reverse 'bad'\n    warn 'this is a crash'\n    warn jr reason\n    process.exit 1\n  # don't throw new Error( reason );\n  # throw reason\n  alert CND.reverse 'evil'\n  alert reason\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\non_any ( channel, data ) ->\n  whisper \"channel: #{rpr channel}, data: #{jr data}\"\n  return 12345\n\n\n#===========================================================================================================\n# CONTRACTORS\n#-----------------------------------------------------------------------------------------------------------\nprimary_on 'sync_task_that_throws_on_failure', ( data ) ->\n  debug 'sync_task_that_throws_on_failure', jr data\n  [ a, b, ] = data\n  if b is 0\n    throw new_failure 'divbyzero', \"division by zero: #{rpr a} / #{rpr b}\", null\n  return a / b\n\n#-----------------------------------------------------------------------------------------------------------\nprimary_on 'sync_task_that_returns_on_failure', ( data ) ->\n  debug 'sync_task_that_returns_on_failure', jr data\n  [ a, b, ] = data\n  if b is 0\n    return new_failure 'divbyzero', \"division by zero: #{rpr a} / #{rpr b}\", null\n  return a / b\n\n#-----------------------------------------------------------------------------------------------------------\nprimary_on 'async_task_that_rejects_on_failure', ( data ) ->\n  debug 'async_task_that_rejects_on_failure', jr data\n  return new Promise ( resolve, reject ) ->\n    [ a, b, ] = data\n    if b is 0\n      reject new_failure 'divbyzero', \"division by zero: #{rpr a} / #{rpr b}\", null\n    else\n      resolve a / b\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nprimary_on 'async_task_that_resolves_on_failure', ( data ) ->\n  debug 'async_task_that_resolves_on_failure', jr data\n  return new Promise ( resolve, reject ) ->\n    [ a, b, ] = data\n    if b is 0\n      resolve new_failure 'divbyzero', \"division by zero: #{rpr a} / #{rpr b}\", null\n    else\n      resolve a / b\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nsample_delegator = ->\n  try\n    #.......................................................................................................\n    info \"computing 4 / 5\"\n    help 'sync_task_that_throws_on_failure',    await delegate 'sync_task_that_throws_on_failure',     [ 4, 5, ]\n    help 'sync_task_that_returns_on_failure',   await delegate 'sync_task_that_returns_on_failure',    [ 4, 5, ]\n    help 'async_task_that_rejects_on_failure',  await delegate 'async_task_that_rejects_on_failure',   [ 4, 5, ]\n    help 'async_task_that_resolves_on_failure', await delegate 'async_task_that_resolves_on_failure',  [ 4, 5, ]\n    #.......................................................................................................\n    info \"computing 3 / 0\"\n    # help 'sync_task_that_throws_on_failure',    await delegate 'sync_task_that_throws_on_failure',     [ 3, 0, ]\n    # help 'sync_task_that_returns_on_failure',   await delegate 'sync_task_that_returns_on_failure',    [ 3, 0, ]\n    # help 'async_task_that_rejects_on_failure',  await delegate 'async_task_that_rejects_on_failure',   [ 3, 0, ]\n    help 'async_task_that_resolves_on_failure', await delegate 'async_task_that_resolves_on_failure',  [ 3, 0, ]\n    # #.......................................................................................................\n    # # In the case of a style B contractor, only happy results are resolved; sad and bad results are\n    # # rejected and end up in the catch clause:\n    return true\n  catch unhappy\n    warn '28921', unhappy\n    if is_sad unhappy\n      # deal with failures: possibly log where and what occurred, return a replacement value (that may in\n      # itself by happy or sad):\n      result_2 = happy unhappy\n      urge \"computing 3 / 0: #{result_2}\"\n      urge 'sample_delegator sad result:    ', jr unhappy\n      return null\n    # refuse to deal with anything else:\n    throw unhappy\n\n#-----------------------------------------------------------------------------------------------------------\nsample_delegator()\n  .then ( x ) ->\n    return error_handler x if is_sad x\n    # xxx\n    help 'resolved', jr x\n  .catch error_handler\n\n\n\n\n\n\n\n\n\n"
  ]
}