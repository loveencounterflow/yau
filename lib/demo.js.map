{
  "version": 3,
  "file": "demo.js",
  "sourceRoot": "..",
  "sources": [
    "src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n### https://ponyfoo.com/articles/understanding-javascript-async-await ###\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'AWAIT-PROMISES2'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nHSB                       = require '/home/flow/io/kleinbild-rack/kbm/lib/happy-sad-bad'\n{ happy, sad, is_sad, new_defect, new_failure, is_crash, crash, is_unhappy, is_happy, } = HSB;\n{ after, immediately: defer, }                = CND.suspend\n{ promisify, }            = require 'util'\njr                        = JSON.stringify\n\n### https://github.com/sindresorhus/emittery ###\nEmittery                  = require 'emittery'\n\n#===========================================================================================================\nrequire_xemitter = ->\n\n  ###\n\n  xemitter uses `sindresorhus/emittery` to provide an event emitter and task delegation facility that\n  simplifies building asynchronous applications using the Actor pattern.\n\n  Events are pairs of channel names and arbitrary data items. Events are emitted by emitter functions.\n\n  An arbitrary number of listeners can listen on any given channel. Listeners may be synchronous (returning\n  anything but a promise) or asynchronous (returning a promise). Each listener produces a value, be it\n  implicitly (`undefined`) or explicitly (by using `return x` or `resolve x`). The outcomes of all listeners\n  are collected into an array of values, which may or may not be consumed by emitters.\n\n  Delegators are (inherently asynchronous) emitter functions that not only emit events, but that also use\n  the result(s) that the event listener(s), if any, produced.\n\n  Because of the inherent unpredictability of the asynchronous mode of operation, no guarantee is made about\n  the ordering of values in the event result array. Since an important use case for event emitting is task\n  delegation, there is a way to distinguish a primary result from spurious and secondary results: On the one\n  hand, up to one listener may bind to a channel using `XMT.primary_on`. Whatever values(s) that listener\n  produces when answering an event will be wrapped into a nonce object. The delegator then uses `await\n  XMT.delegate` or `XMT.select await XMT.emit` to retrieve up to one primary item from the event results:\n\n  ```\n  # define a function that delegates some task:\n  sample_delegator = ->\n    result = await delegate 'some_task', 42\n    if is_sad result\n      ... sad path ...\n    else\n      ... happy path ...\n      return some_value\n\n  # use the delegator:\n  sample_delegator()\n    .then ( x ) ->\n      return error_handler x if is_sad x\n      # xxx\n      help 'resolved', jr x\n    .catch error_handler\n  ```\n\n\n  ###\n\n  #-----------------------------------------------------------------------------------------------------------\n  @_emitter = new Emittery()\n  @_has_primary_listeners = {}\n\n  #-----------------------------------------------------------------------------------------------------------\n  @_mark_as_primary = ( x ) -> { '~isa': 'XEMITTER/preferred', value: x, }\n\n  #-----------------------------------------------------------------------------------------------------------\n  @select = ( values ) -> ( values.filter ( x ) -> CND.isa x, 'XEMITTER/preferred' )[ 0 ]?.value ? null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @primary_on = ( channel, listener ) ->\n    if @_has_primary_listeners[ channel ]\n      throw new Error \"channel #{rpr channel} already has a primary listener\"\n    @_has_primary_listeners[ channel ] = yes\n    @_emitter.on channel, ( data ) =>\n      return @_mark_as_primary await listener data\n\n  #-----------------------------------------------------------------------------------------------------------\n  @also_on = ( channel, listener ) ->\n    @_emitter.on channel, listener\n\n  #-----------------------------------------------------------------------------------------------------------\n  @emit     = ( channel, data ) ->               @_emitter.emit channel, data\n  @delegate = ( channel, data ) -> @select await @_emitter.emit channel, data\n\n  # debug '22621', Object::toString.call @delegate\n\n  ############################################################################################################\n  for name, value of L = @\n    ### TAINT poor man's 'callable' detection ###\n    continue unless CND.isa_function value.bind\n    L[ name ] = value.bind L\n\n############################################################################################################\nrequire_xemitter.apply XMT = {}\n{ select, emit, delegate, also_on, primary_on, } = XMT\n\n#-----------------------------------------------------------------------------------------------------------\nerror_handler = ( reason ) ->\n  if is_sad reason\n    return urge 'this is sad:', jr reason\n  if is_crash reason\n    warn CND.reverse 'bad'\n    warn 'this is a crash'\n    warn jr reason\n    process.exit 1\n  # don't throw new Error( reason );\n  # throw reason\n  alert CND.reverse 'evil'\n  alert reason\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nalso_on 'some_task_A', ( data ) ->\n  debug 'on some_task_A', jr data\n  return 'a secondary result'\n\n#-----------------------------------------------------------------------------------------------------------\nalso_on 'some_task_B', ( data ) ->\n  debug 'on some_task_B', jr data\n  return 'a secondary result'\n\n#===========================================================================================================\nuse_sample_delegator_A = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  primary_on 'some_task_A', ( data ) ->\n    debug 'on some_task_A', jr data\n    return new Promise ( pass, toss ) ->\n      if Math.random() > 0.5\n        pass \"a happy primary result\"\n      else\n        pass new_failure 'code42', \"a sad primary result\"\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  sample_delegator_A = ->\n    result = await delegate 'some_task_A', 42\n    # result = select await emit 'some_task_A', 42\n    if is_sad result\n      urge 'sample_delegator_A sad result:    ', jr result\n      return null\n    else\n      help 'sample_delegator_A happy result:  ', jr result\n      return \"**#{result}**\"\n\n  #-----------------------------------------------------------------------------------------------------------\n  sample_delegator_A()\n    .then ( x ) ->\n      return error_handler x if is_sad x\n      # xxx\n      help 'resolved', jr x\n    .catch error_handler\n\n#===========================================================================================================\nuse_sample_delegator_B = ( settings ) ->\n\n  #===========================================================================================================\n  ### Synchronous contractors without promises and asynchronous contractors with promises show the same\n  behavior; crucially, **the delegator does not have to be aware of any difference between the two**: ###\n  if settings.use_promises_in_contractor\n    info \"using contractor with promises\"\n    #-----------------------------------------------------------------------------------------------------------\n    primary_on 'some_task_B', ( data ) ->\n      debug 'on some_task_B', jr data\n      return new Promise ( resolve, reject ) ->\n        [ a, b, ] = data\n        return reject new_failure 'divbyzero', \"division by zero: #{rpr a} / #{rpr b}\", null if b is 0\n        resolve a / b\n  else\n    info \"using contractor *without* promises\"\n    #-----------------------------------------------------------------------------------------------------------\n    primary_on 'some_task_B', ( data ) ->\n      debug 'on some_task_B', jr data\n      [ a, b, ] = data\n      throw new_failure 'divbyzero', \"division by zero: #{rpr a} / #{rpr b}\", null if b is 0\n      return a / b\n\n  #-----------------------------------------------------------------------------------------------------------\n  sample_delegator_B = ->\n    try\n      #.......................................................................................................\n      info \"computing 4 / 5\"\n      result_1 = await delegate 'some_task_B', [ 4, 5, ]\n      info \"computing 4 / 5: #{result_1}\"\n      #.......................................................................................................\n      info \"computing 3 / 0\"\n      result_2 = await delegate 'some_task_B', [ 3, 0, ]\n      info \"computing 3 / 0: #{result_2}\"\n      #.......................................................................................................\n      # In the case of a style B contractor, only happy results are resolved; sad and bad results are\n      # rejected and end up in the catch clause:\n      return [ result_1, result_2, ]\n    catch unhappy\n      warn '28921', unhappy\n      if is_sad unhappy\n        # deal with failures: possibly log where and what occurred, return a replacement value (that may in\n        # itself by happy or sad):\n        result_2 = happy unhappy\n        urge \"computing 3 / 0: #{result_2}\"\n        urge 'sample_delegator_B sad result:    ', jr unhappy\n        return null\n      # refuse to deal with anything else:\n      throw unhappy\n\n  #-----------------------------------------------------------------------------------------------------------\n  sample_delegator_B()\n    .then ( x ) ->\n      return error_handler x if is_sad x\n      # xxx\n      help 'resolved', jr x\n    .catch error_handler\n\n############################################################################################################\nunless module.parent?\n  # use_sample_delegator_A()\n  use_sample_delegator_B { use_promises_in_contractor: yes, }\n  # use_sample_delegator_B { use_promises_in_contractor: no, }\n\n\n\n\n\n\n\n\n"
  ]
}