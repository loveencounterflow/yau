{
  "version": 3,
  "file": "happy-sad-bad.js",
  "sourceRoot": "..",
  "sources": [
    "src/happy-sad-bad.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAA,YAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;EA2BA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B,EApC5B;;;;;;;;;;;;;;EAkDA,YAAA,GAAe,QAAA,CAAE,QAAQ,CAAV,CAAA;AAGb,QAAA,GAAA;;;AAAA,WAAO,sEAAsD,WAAtD,CAAmE,CAAC,OAApE,CAA4E,kBAA5E,EAAgG,IAAhG;EAHM,EAlDf;;;EAwDA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,CAAF,CAAA;AAEP,QAAA,GAAA,EAAA,IAAA,EAAA;IAAA,IAAuC,IAAC,CAAA,QAAD,CAAW,CAAX,CAAvC;;AAAA,aAAO,EAAP;;IACA,IAAuC,IAAC,CAAA,MAAD,CAAW,CAAX,CAAvC;AAAA,aAAO,CAAC,CAAC,MAAT;;IACA,IAAuC,IAAC,CAAA,QAAD,CAAW,CAAX,CAAvC;AAAA,gFAA4B,QAA5B;;AACA,+CAAmB;EALZ,EAxDT;;;EAgEA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAA,GAAE,CAAF,CAAA;AACV,QAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA;IAAA,IAAA,CAAA,CAAiE,CAAE,KAAA,GAAQ,CAAC,CAAC,MAAZ,CAAA,IAAwB,CAAzF,CAAA;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,KAAlC,CAAA,CAAV,EAAN;;IACA,CAAE,IAAF,EAAQ,OAAR,EAAiB,KAAjB,CAAA,GAA4B;;MAC5B,OAAW;;;MACX,UAAW;KAHX;;AAKA,WAAO,CAAE,IAAF,EAAQ,OAAR,EAAiB,KAAjB;EANG,EAhEZ;;;EAyEA,IAAC,CAAA,GAAD,GAAO,QAAA,CAAE,IAAF,EAAQ,OAAR,EAAiB,KAAjB,CAAA;IACL,CAAE,IAAF,EAAQ,OAAR,EAAiB,KAAjB,CAAA,GAA4B,IAAC,CAAA,QAAQ,CAAC,KAAV,CAAgB,IAAhB,EAAmB,SAAnB;IAC5B,KAAA,GAA+B,IAAC,CAAA,MAAD,CAAQ,KAAR,CAAH,GAAsB,KAAK,CAAC,KAA5B,GAAuC;AACnE,WAAO;MAAE,MAAA,EAAQ,SAAV;MAAqB,IAArB;MAA2B,OAA3B;MAAoC;IAApC;EAHF,EAzEP;;;EA+EA,IAAC,CAAA,WAAD,GAAgB,QAAA,CAAE,IAAF,EAAQ,OAAR,EAAiB,KAAjB,CAAA;WAA4B,IAAC,CAAA,GAAD,CAAK,CAAA,QAAA,CAAA,CAAW,IAAX,CAAA,CAAL,EAAwB,OAAxB,kBAAiC,QAAQ,IAAzC;EAA5B;;EAChB,IAAC,CAAA,UAAD,GAAgB,QAAA,CAAE,IAAF,EAAQ,OAAR,EAAiB,KAAjB,CAAA;WAA4B,IAAC,CAAA,GAAD,CAAK,CAAA,OAAA,CAAA,CAAU,IAAV,CAAA,CAAL,EAAwB,OAAxB,kBAAiC,QAAQ,IAAzC;EAA5B,EAhFhB;;;EAmFA,IAAC,CAAA,QAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAI,IAAC,CAAA,UAAD,CAAY,CAAZ;EAAb;;EAChB,IAAC,CAAA,MAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,GAAG,CAAC,OAAJ,CAAY,CAAZ,CAAF,CAAA,KAAqB;EAA9B;;EAChB,IAAC,CAAA,QAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,GAAG,CAAC,OAAJ,CAAY,CAAZ,CAAF,CAAA,KAAqB;EAA9B;;EAChB,IAAC,CAAA,MAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,GAAG,CAAC,WAAJ,CAAgB,CAAhB,CAAF,CAAA,IAA+B,CAAE,IAAC,CAAA,QAAD,CAAU,CAAV,CAAF;EAAxC;;EAChB,IAAC,CAAA,QAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,GAAG,CAAC,WAAJ,CAAgB,CAAhB,CAAF,CAAA,IAA0B,CAAK,CAAE,IAAC,CAAA,QAAD,CAAU,CAAV,CAAF;EAAxC;;EAChB,IAAC,CAAA,UAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAF,CAAA,IAAiB,CAAE,GAAG,CAAC,WAAJ,CAAgB,CAAhB,CAAF;EAA1B,EAxFhB;;;EA2FA,IAAC,CAAA,SAAD,GAAa,QAAA,CAAA,GAAE,CAAF,CAAA;AACX,QAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA;AAAA,YAAO,KAAA,GAAQ,CAAC,CAAC,MAAjB;AAAA,WACO,CADP;QACc,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB,CAAA,GAAoC,CAAE,OAAF,EAAW,qCAAX,EAAkD,IAAlD,EAAwD,CAAxD;AAA3C;AADP,WAEO,CAFP;QAEc,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB,CAAA,GAAoC,CAAE,CAAG,CAAA,CAAA,CAAL,EAAW,qCAAX,EAAkD,IAAlD,EAAwD,CAAxD;AAA3C;AAFP,WAGO,CAHP;QAGc,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB,CAAA,GAAoC,CAAE,CAAG,CAAA,CAAA,CAAL,EAAU,CAAG,CAAA,CAAA,CAAb,EAAoB,IAApB,EAA0B,CAA1B;AAA3C;AAHP,WAIO,CAJP;QAIc,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB,CAAA,GAAoC,CAAE,CAAG,CAAA,CAAA,CAAL,EAAU,CAAG,CAAA,CAAA,CAAb,EAAkB,CAAG,CAAA,CAAA,CAArB,EAA0B,CAA1B;AAA3C;AAJP,WAKO,CALP;QAKc,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB,CAAA,GAAoC;AAA3C;AALP;QAMO,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,KAAlC,CAAA,CAAV;AANb;AAOA,WAAO,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB;EARI,EA3Fb;;;EAsGA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,IAAF,EAAQ,OAAR,EAAiB,SAAS,IAA1B,CAAA;IAAoC,MAAM,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,OAAlB,EAA2B,MAA3B,EAAmC,CAAnC;EAA1C,EAtGT;;;EAyGA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB,CAAA;AAEZ,QAAA,CAAA;;IAAA,CAAA,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB,CAAA,GAAoC,IAAC,CAAA,SAAS,CAAC,KAAX,CAAiB,IAAjB,EAAoB,SAApB,CAApC;IACA,IAAG,GAAG,CAAC,WAAJ,CAAgB,IAAhB,CAAH;MACE,CAAA,GAAc;MACd,IAAyB,eAAzB;QAAA,CAAC,CAAC,OAAF,GAAc,QAAd;OAFF;KAAA,MAAA;MAIE,CAAA,GAAc,IAAI,KAAJ,CAAU,OAAV;MACd,CAAC,CAAC,IAAF,GAAc,KALhB;KADA;;;MAQA,CAAC,CAAC,UAAY;;IACd,IAAA,CAA2D,CAAC,CAAC,OAAO,CAAC,UAAV,CAAqB,cAArB,CAA3D;MAAA,CAAC,CAAC,OAAF,GAAc,CAAA,YAAA,CAAA,CAAe,GAAA,CAAI,IAAJ,CAAf,CAAwB,EAAxB,CAAA,CAA4B,OAA5B,CAAA,EAAd;;IACA,CAAC,CAAC,MAAF,GAAc;IACd,CAAC,CAAC,QAAF,GAAc,YAAA,CAAa,KAAA,GAAQ,CAArB;IACd,CAAG,CAAA,MAAA,CAAH,GAAc,YAZd;;AAcA,WAAO;EAhBK,EAzGd;;;;;EA+HA,UAAA,GACE;IAAA,KAAA,EAAY,CAAZ;IACA,KAAA,EAAY,CADZ;IAEA,QAAA,EAAY;EAFZ,EAhIF;;;EAqIA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAE,SAAF,CAAA;AAEd,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA;;IAAA,KAAA,CAAM,OAAN,EAAe,GAAA,CAAI,SAAJ,CAAf,EAAA;;IAEA,IAAG,IAAC,CAAA,QAAD,CAAU,SAAV,CAAH;MACE,KAAA,GAAsB;MACtB,OAAA,6CAA0C;MAC1C,CAAE,IAAF,EAAQ,GAAA,IAAR,CAAA,GAAsB,OAAO,CAAC,KAAR,CAAc,IAAd,EAHxB;KAAA,MAAA;MAKE,KAAA,GAAsB;MACtB,OAAA,GAAsB,mBAAA,GAAsB,6CAAsB,qCAAtB;MAC5C,CAAE,IAAF,EAAQ,GAAA,IAAR,CAAA,GAAsB,OAAO,CAAC,KAAR,CAAc,IAAd,EAPxB;;IAQA,KAAA,CAAM,GAAG,CAAC,OAAJ,CAAY,GAAA,GAAM,IAAN,GAAa,GAAzB,CAAN;IACA,KAAA,sCAAA;;MAAA,IAAA,CAAK,IAAL;IAAA,CAXA;;IAaA,OAAA,CAAQ,SAAS,CAAC,KAAlB;WACA,OAAO,CAAC,IAAR,sDAA4C,UAAY,CAAA,OAAA,CAAxD;EAhBc,EArIhB;;;;;;EA2JG,CAAA,QAAA,CAAE,EAAF,CAAA;AACD,QAAA,MAAA,EAAA,IAAA,EAAA;AAAA;IAAA,KAAA,UAAA;;MACE,IAAA,CAAgB,GAAG,CAAC,YAAJ,CAAiB,MAAjB,CAAhB;AAAA,iBAAA;;mBACA,EAAI,CAAA,IAAA,CAAJ,GAAa,MAAM,CAAC,IAAP,CAAY,EAAZ;IAFf,CAAA;;EADC,CAAA,CAAH,CAAU,IAAV;;EA3JA;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n###\n\n* **happy**\n  * **success**\n\n* **sad**\n  * **anomaly**—a sanity check failed that gets logged but does not lead to a crash.\n\n  * **failure**—a well-known, uwanted but *recoverable* outcome, e.g. `image_optim` runs but bails\n    out with error code `1` and a `stderr` output that contains 'is not an image or there is no optimizer\n    for it'. An error due to user input data, not a software misbehavior.\n\n  * **defect**—software misconfiguration *on a node*;\n\n* **bad**\n  * **crash**—software misconfiguration *on the server*;\n\n  * **error**—something else went wrong. Failure to distinguish between a software bug, a vandal\n    image or a hardware failure. Application behavior is undefined. Errors should never occur.\n\n###\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HSB'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n\n# @x = 42\n# @f = => debug 'f', @x\n# @g = -> debug 'g', @x\n# @f()\n# @g()\n# { f, g, } = @\n# f()\n# g()\n\n# process.exit 1\n\n#-----------------------------------------------------------------------------------------------------------\nget_location = ( delta = 0 ) ->\n  ### TAINT probably a good idea to use a tested library for this ###\n  # debug ( new Error() ).stack\n  return ( ( ( new Error() ).stack.split '\\n' )[ delta + 2 ] ? '(unknown)' ).replace /^.*?\\((.*)\\).*?$/, '$1'\n\n#-----------------------------------------------------------------------------------------------------------\n@happy = ( x ) ->\n  ### TAINT what to do with exceptions? ###\n  return x                            if @is_happy  x\n  return x.value                      if @is_sad    x\n  return x.message ? x.code ? 'crash' if @is_crash  x\n  return x.message ? x\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_cmv = ( P... ) ->\n  throw new Error \"ecpected 0 to 3 arguments, got #{arity}\" unless ( arity = P.length ) <= 3\n  [ code, message, value, ] = P\n  code    ?= 'defect'\n  message ?= null\n  # value   ?= if arity is 3 then value else null\n  return [ code, message, value, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@sad = ( code, message, value ) ->\n  [ code, message, value, ] = @_get_cmv.apply @, arguments\n  value                     = if @is_sad value then value.value else value\n  return { '~isa': 'HSB/sad', code, message, value, }\n\n#-----------------------------------------------------------------------------------------------------------\n@new_failure  = ( code, message, value ) -> @sad \"failure/#{code}\", message, value ? null\n@new_defect   = ( code, message, value ) -> @sad \"defect/#{code}\",  message, value ? null\n\n#-----------------------------------------------------------------------------------------------------------\n@is_happy     = ( x ) -> not @is_unhappy x\n@is_sad       = ( x ) -> ( CND.type_of x ) is 'HSB/sad'\n@is_crash     = ( x ) -> ( CND.type_of x ) is 'HSB/crash'\n@is_bad       = ( x ) -> ( CND.isa_jserror x ) or       ( @is_crash x )\n@is_error     = ( x ) -> ( CND.isa_jserror x ) and not  ( @is_crash x )\n@is_unhappy   = ( x ) -> ( @is_sad x ) or ( CND.isa_jserror x )\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_cmad = ( P... ) ->\n  switch arity = P.length\n    when 0 then [ code, message, advice, delta, ] = [ 'crash', \"an unrecoverable condition occurred\", null, 1, ]\n    when 1 then [ code, message, advice, delta, ] = [ P[ 0 ],  \"an unrecoverable condition occurred\", null, 1, ]\n    when 2 then [ code, message, advice, delta, ] = [ P[ 0 ], P[ 1 ],   null, 1, ]\n    when 3 then [ code, message, advice, delta, ] = [ P[ 0 ], P[ 1 ], P[ 2 ], 1, ]\n    when 4 then [ code, message, advice, delta, ] = P\n    else throw new Error \"ecpected 0 to 4 arguments, got #{arity}\"\n  return { code, message, advice, delta, }\n\n#-----------------------------------------------------------------------------------------------------------\n@crash = ( code, message, advice = null ) -> throw @_new_crash code, message, advice, 1\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_crash = ( code, message, advice, delta ) ->\n  ## when isa_jserror code, just\n  { code, message, advice, delta, } = @_get_cmad.apply @, arguments\n  if CND.isa_jserror code\n    R           = code\n    R.message   = message if message?\n  else\n    R           = new Error message\n    R.code      = code\n  #.........................................................................................................\n  R.message  ?= ''\n  R.message   = \"CRASH code: #{rpr code}\\n#{message}\" unless R.message.startsWith 'CRASH code: '\n  R.advice    = advice\n  R.location  = get_location delta + 1\n  R[ '~isa' ] = 'HSB/crash'\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n# EXCEPTION HANDLING\n#-----------------------------------------------------------------------------------------------------------\nexit_codes =\n  error:      1\n  crash:      2\n  notfound:   127\n\n#-----------------------------------------------------------------------------------------------------------\n@exit_handler = ( exception ) ->\n  # throw exception unless @is_error exception\n  debug '55567', rpr exception\n  # throw exception unless @is_crash exception\n  if @is_crash exception\n    print               = warn\n    message             = exception.message ? \"CRASH code: crash\\nan unrecoverable condition occurred\"\n    [ head, tail..., ]  = message.split '\\n'\n  else\n    print               = alert\n    message             = 'ROGUE EXCEPTION: ' + ( exception.message ? \"an unrecoverable condition occurred\" )\n    [ head, tail..., ]  = message.split '\\n'\n  print CND.reverse ' ' + head + ' '\n  warn line for line in tail\n  ### TAINT should have a way to set exit code explicitly ###\n  whisper exception.stack\n  process.exit exit_codes[ exception.code ] ? exit_codes[ 'error' ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @remove_exit_handler = -> process.removeListener 'uncaughtException', @exit_handler\n\n############################################################################################################\ndo ( ME = @ ) ->\n  for name, method of ME\n    continue unless CND.isa_function method\n    ME[ name ] = method.bind ME\n\n############################################################################################################\n# process.on 'uncaughtException', @exit_handler\n\n# @remove_exit_handler()\n# @crash 'notfound', \"didn't find something\"\n# @crash 'oops'\n\n\n\n"
  ]
}