{
  "version": 3,
  "file": "happy-sad-bad.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/happy-sad-bad.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'KBM/TESTS/HAPPY-SAD-BAD'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# FS                        = require 'fs'\n# OS                        = require 'os'\nTAP                       = require 'tap'\n#...........................................................................................................\n# L                         = ( P... ) -> debug CND.rainbow P...\n{ defer\n  every\n  jr\n  jrnl\n  assign\n  copy_without\n  pluck\n  new_switcher  }         = require '../utilities'\neq                        = CND.equals\n#...........................................................................................................\nHSB                       = require '../happy-sad-bad'\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"basics\", ( T ) ->\n  probes_and_matchers = [\n    [ [], {\"~isa\":\"error/sad\",\"code\":\"defect\",\"message\":null,\"value\":undefined}]\n    [ [ null, null, 42 ], {\"~isa\":\"error/sad\",\"code\":\"defect\",\"message\":null,\"value\":42}]\n    [ [ null, null, undefined ], {\"~isa\":\"error/sad\",\"code\":\"defect\",\"message\":null,\"value\":undefined}]\n    [ [ null, null, null ], {\"~isa\":\"error/sad\",\"code\":\"defect\",\"message\":null,\"value\":null}]\n    [ [ 'anomaly', null, 42 ], {\"~isa\":\"error/sad\",\"code\":\"anomaly\",\"message\":null,\"value\":42}]\n    [ [ 'anomaly', \"this wasn't expected\", 42], {\"~isa\":\"error/sad\",\"code\":\"anomaly\",\"message\":\"this wasn't expected\",\"value\":42}]\n    ]\n  { happy, sad, is_sad, new_crash, is_crash, is_unhappy, is_happy, } = HSB\n  for [ probe, matcher, ] in probes_and_matchers\n    result = sad probe...\n    urge ( jr [ probe, result, ] ), ( CND.truth eq result, matcher )\n    T.ok eq result, matcher\n  #.........................................................................................................\n  T.end()\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"demo\", ( T ) ->\n  #.........................................................................................................\n  index_of = ( x, probe ) ->\n    R = x.indexOf probe\n    if R < 0\n      R = sad 'notfound', \"value #{rpr probe} was not found\", R\n    return R\n  #.........................................................................................................\n  { happy, sad, is_sad, new_crash, is_crash, is_unhappy, is_happy, } = HSB\n  T.ok ( index_of 'abcd', 'c' ), 2\n  T.ok eq ( is_sad index_of 'abcd', 'x' ), true\n  warn 'x'\n  if is_sad index = index_of 'abcd', 'x'\n    warn index.message\n    T.ok eq index, { '~isa': 'error/sad', code: 'notfound', message: 'value \\'x\\' was not found', value: -1 }\n    T.ok eq index.message, \"value 'x' was not found\"\n  #.........................................................................................................\n  T.end()\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"exceptions 1\", ( T ) ->\n  { happy, sad, is_sad, new_crash, is_crash, crash, is_unhappy, is_happy, } = HSB\n  probes_and_matchers = [\n    [ -> new_crash()]\n    [ -> new_crash 'notfound']\n    [ -> new_crash 'notfound', \"no such file: path/to/file\"]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    try probe()\n    catch error\n      warn error.message\n  #.........................................................................................................\n  T.end()\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"exceptions 2\", ( T ) ->\n  { happy, sad, is_sad, new_crash, is_crash, crash, is_unhappy, is_happy, } = HSB\n  probes_and_matchers = [\n    [ ( -> crash()                                        ), \"CRASH code: 'crash'\\nan unrecoverable condition occurred\" ]\n    [ ( -> crash 'notfound'                               ), \"CRASH code: 'notfound'\\nan unrecoverable condition occurred\" ]\n    [ ( -> crash 'notfound', \"no such file: path/to/file\" ), \"CRASH code: 'notfound'\\nno such file: path/to/file\" ]\n    ]\n  #.........................................................................................................\n  count = 0\n  for [ probe, matcher, ] in probes_and_matchers\n    try probe()\n    catch error\n      urge jr error.message\n      T.ok eq error.message, matcher\n      count += +1\n  unless count is probes_and_matchers.length\n    T.fail \"expected to see #{probes_and_matchers.length} exceptions, only saw #{count}\"\n  #.........................................................................................................\n  T.end()\n\n#-----------------------------------------------------------------------------------------------------------\nf = -> TAP.test \"basics\", ( T ) ->\n\n  try throw new_crash \"something went wrong\"\n  catch error then warn JSON.stringify error\n  try throw new_crash 'cx742', \"something went wrong\"\n  catch error then warn JSON.stringify error\n\n  urge()\n  urge CND.truth is_happy     \"oops\"\n  urge CND.truth is_happy     new_crash \"oops\"\n  urge CND.truth is_happy     sad \"oops\"\n\n  urge()\n  urge CND.truth is_unhappy   \"oops\"\n  urge CND.truth is_unhappy   new_crash \"oops\"\n  urge CND.truth is_unhappy   sad \"oops\"\n\n  urge()\n  urge CND.truth is_crash  \"oops\"\n  urge CND.truth is_crash  new_crash \"oops\"\n  urge CND.truth is_crash  sad \"oops\"\n\n  warn happy new Error    \"something went wrong, but can deal with it\"\n  warn happy new_crash \"something went wrong, but can deal with it\"\n  warn happy new_crash 'code-blue', \"something went wrong, but can deal with it\"\n  warn happy 42\n\n  help @new_defect  \"not as expected\"\n  help @new_anomaly \"this is strange\"\n\n\n  T.end()\n  return null\n\n\n"
  ]
}